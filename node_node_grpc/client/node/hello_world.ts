// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: hello_world.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface HelloWhoRq {
  name: string;
}

export interface HelloRs {
  name: string;
}

function createBaseHelloWhoRq(): HelloWhoRq {
  return { name: "" };
}

export const HelloWhoRq: MessageFns<HelloWhoRq> = {
  encode(message: HelloWhoRq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HelloWhoRq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloWhoRq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HelloWhoRq {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: HelloWhoRq): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HelloWhoRq>, I>>(base?: I): HelloWhoRq {
    return HelloWhoRq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HelloWhoRq>, I>>(object: I): HelloWhoRq {
    const message = createBaseHelloWhoRq();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseHelloRs(): HelloRs {
  return { name: "" };
}

export const HelloRs: MessageFns<HelloRs> = {
  encode(message: HelloRs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HelloRs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloRs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HelloRs {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: HelloRs): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HelloRs>, I>>(base?: I): HelloRs {
    return HelloRs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HelloRs>, I>>(object: I): HelloRs {
    const message = createBaseHelloRs();
    message.name = object.name ?? "";
    return message;
  },
};

export type HelloServiceService = typeof HelloServiceService;
export const HelloServiceService = {
  helloWho: {
    path: "/HelloService/HelloWho",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HelloWhoRq) => Buffer.from(HelloWhoRq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => HelloWhoRq.decode(value),
    responseSerialize: (value: HelloRs) => Buffer.from(HelloRs.encode(value).finish()),
    responseDeserialize: (value: Buffer) => HelloRs.decode(value),
  },
} as const;

export interface HelloServiceServer extends UntypedServiceImplementation {
  helloWho: handleUnaryCall<HelloWhoRq, HelloRs>;
}

export interface HelloServiceClient extends Client {
  helloWho(request: HelloWhoRq, callback: (error: ServiceError | null, response: HelloRs) => void): ClientUnaryCall;
  helloWho(
    request: HelloWhoRq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HelloRs) => void,
  ): ClientUnaryCall;
  helloWho(
    request: HelloWhoRq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HelloRs) => void,
  ): ClientUnaryCall;
}

export const HelloServiceClient = makeGenericClientConstructor(HelloServiceService, "HelloService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): HelloServiceClient;
  service: typeof HelloServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
