// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: hello.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "";

export interface HelloRq {
  name: string;
}

export interface HelloRs {
  greeting: string;
}

function createBaseHelloRq(): HelloRq {
  return { name: "" };
}

export const HelloRq: MessageFns<HelloRq> = {
  encode(message: HelloRq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HelloRq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloRq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<HelloRq>): HelloRq {
    return HelloRq.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HelloRq>): HelloRq {
    const message = createBaseHelloRq();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseHelloRs(): HelloRs {
  return { greeting: "" };
}

export const HelloRs: MessageFns<HelloRs> = {
  encode(message: HelloRs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.greeting !== "") {
      writer.uint32(10).string(message.greeting);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HelloRs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloRs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.greeting = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<HelloRs>): HelloRs {
    return HelloRs.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HelloRs>): HelloRs {
    const message = createBaseHelloRs();
    message.greeting = object.greeting ?? "";
    return message;
  },
};

export type HelloDefinition = typeof HelloDefinition;
export const HelloDefinition = {
  name: "Hello",
  fullName: "Hello",
  methods: {
    helloWho: {
      name: "helloWho",
      requestType: HelloRq,
      requestStream: false,
      responseType: HelloRs,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface HelloServiceImplementation<CallContextExt = {}> {
  helloWho(request: HelloRq, context: CallContext & CallContextExt): Promise<DeepPartial<HelloRs>>;
}

export interface HelloClient<CallOptionsExt = {}> {
  helloWho(request: DeepPartial<HelloRq>, options?: CallOptions & CallOptionsExt): Promise<HelloRs>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
